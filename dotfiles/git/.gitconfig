# partially stolen from https://github.com/quchen/dotfiles/
[user]
    name = Maximilian Huber
    email = mail@maximilian-huber.de
    signingkey = 32CA3654
[core]
	  logAllRefUpdates = always
[alias]
    s           = status --short --branch
	  b           = branch -vv
    a           = add
    c           = commit
    cf          = commit --fixup
		cm          = commit -m
    chunk       = commit --patch
    chunkammend = commit --patch --amend
    cma         = commit -am
    cfa         = commit -a --fixup
    cfa0         = commit -a --fixup HEAD
    cfa1         = commit -a --fixup HEAD~
    cfa2         = commit -a --fixup HEAD~2
    cfa3         = commit -a --fixup HEAD~3
    cfa4         = commit -a --fixup HEAD~4
    cfa5         = commit -a --fixup
    ca          = commit --amend
    caa         = commit --amend -a
    cac         = commit --patch --amend
    co          = checkout
    cob         = checkout -b
	  f           = "!f() { git fetch ${1:-\"--all\"}; }; f"
	  pom         = pull --rebase origin master
	  pum         = pull --rebase upstream master
	  cp          = cherry-pick

    d           = diff
    d0          = diff HEAD
    d1          = diff HEAD~
    d2          = diff HEAD~2
    d3          = diff HEAD~3
    d4          = diff HEAD~4
    dstaged     = diff --staged
    ds          = diff --stat -r
    ds0         = diff --stat -r HEAD
    ds1         = diff --stat -r HEAD~
    ds2         = diff --stat -r HEAD~2
    ds3         = diff --stat -r HEAD~3
    ds4         = diff --stat -r HEAD~4
    dd          = diff --word-diff=color
    dw          = diff --color-words="[^[:space:],;:_-]+"
    dt          = difftool --dir-diff
    dAncestor   = "!f() { git diff $(git merge-base master HEAD); }; f"
    dsAncestor  = "!f() { git diff --stat $(git merge-base master HEAD); }; f"
    changes     = diff --name-status -r
    diffstat    = diff --stat -r
    sortdiff    = !sh -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1'
    

    ri          = rebase --autosquash --interactive
    rc          = rebase --continue
    ra          = rebase --abort
    rMaster     = rebase --autosquash --interactive master
    rAncestor   = "!f() { git rebase --autosquash --interactive $(git merge-base ${1:-master} HEAD); }; f"
    rsAncestor  = "!f() { git reset --soft $(git merge-base master HEAD); }; f"


    mkBundle    = "!f() { git bundle create \"../$(basename $(pwd)).bundle\" --all; }; f"
	

    mt          = mergetool --no-prompt
    l           = log
    lg          = log --oneline
    sinit       = submodule init
    sup         = submodule update
    sdiff       = "!git diff && git submodule foreach 'git diff'"
    spush       = push --recurse-submodules=on-demand
    supdate     = submodule update --remote --merge
    unstage     = reset HEAD --
    untrack     = rm --cached
    unadd       = rm --cached

    whatis      = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    pwhatis     = show -s --pretty='tformat:%h, %s, %ad' --date=short

    new         = !sh -c 'git log $1@{1}..$1@{0} "$@"'

    remadd      = "!f() { \
						       			git remote add $1 git@github.com:${1}/${2}.git; \
	                 }; f"
    ghc         = "!f() { \
                        if [ \"$#\" -ne 2 ]; then echo \"needs two arguments\"; exit 1; fi;\
                        git clone git@github.com:${1}/${2}.git ${1}-${2}; \
                    }; f"
    remotes     = remote -v

    # Pretty graphs
    lol         = log --graph --decorate --pretty=oneline --abbrev-commit
    lola        = log --graph --decorate --pretty=oneline --abbrev-commit --all
    # Up to current commit, medium commit info
    g           = log --graph --pretty=format:'%C(reverse) %C(reset) %C(red)%C(bold)%h%C(reset)%C(yellow)%d%C(reset) %n%C(reverse)%C(bold)  %s %C(reset)%n%C(reverse) %C(reset) Author: %C(bold)%an%C(reset) <%ae> %C(bold)%ar%C(reset) (%ai)%n'
    # Long, full commit info
	  gl          = log --graph --pretty=format:'%C(reverse) %C(reset) %C(red)%C(bold)%h%C(reset) (%H)%C(yellow)%d%C(reset)%n%C(reverse)  %C(bold)%s %C(reset)%n%b%n%nAuthor: %C(bold)%an%C(reset) <%ae> %C(bold)%ar%C(reset) (%ai)%nCommitter: %cn <%ce> %C(bold)%cr%C(reset) (%ci)%n'
		gg          = log --graph --all --pretty=format:'%C(reverse) %C(reset) %C(red)%C(bold)%h%C(reset)%C(yellow)%d%C(reset) %n%C(reverse)%C(bold)  %s %C(reset)%n%C(reverse) %C(reset) Author: %C(bold)%an%C(reset) <%ae> %C(bold)%ar%C(reset) (%ai)%n'
    # All commits, full commit info
    ggl         = log --graph --all --pretty=format:'%C(reverse) %C(reset) %C(red)%C(bold)%h%C(reset) (%H)%C(yellow)%d%C(reset)%n%C(reverse)  %C(bold)%s %C(reset)%n%b%n%nAuthor: %C(bold)%an%C(reset) <%ae> %C(bold)%ar%C(reset) (%ai)%nCommitter: %cn <%ce> %C(bold)%cr%C(reset) (%ci)%n'

    ls-assume-unchanged = !git ls-files -v | grep ^h | awk '{print $2}'
    assume-unchanged    = update-index --assume-unchanged
    assume-changed      = update-index --no-assume-unchanged
    testPR      = "!f() { [[ $(git diff --shortstat 2> /dev/null | tail -n1) != \"\" ]] && { \
 	                          echo \"git is unclean\"; \
 	                          return 1; \
 	                        }; \
                          remote=\"${2:-origin}\"; \
                          branch=\"testpr/${remote}/${1}\"; \
                          git fetch \"${remote}\" \"+refs/pull/${1}/merge:\" \
                          && ( git checkout -b \"$branch\" -qf FETCH_HEAD \
                            || ( git checkout \"$branch\" \
                              && git reset --hard FETCH_HEAD ) ) \
                          || ( echo && echo \"possible refs:\" && git ls-remote $remote | grep \"/merge\"; ); \
                        }; f"

	  changeAuthor = commit --amend --no-edit --author

    # git subtree:
    sba         = "!f() { git subtree add --prefix $2 $1 master --squash; }; f" 
    sbu         = "!f() { git subtree pull --prefix $2 $1 master --squash; }; f" 

    # typos
    psuh = "push"
[color]
    branch = auto
    diff = auto
    interactive = auto
    status = auto
[core]
    autocrlf = input
	safecrlf = false
[pull]
	rebase = true
[rebase]
	autoStash = true
[push]
    default = matching
[giggle]
    main-window-maximized = false
    main-window-geometry = 1366x754+0+14
    history-view-vpane-position = 382
    main-window-view = HistoryView
    file-view-vpane-position = 652
[credential]
	helper = cache --timeout=3600
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true

# stolen from https://stackoverflow.com/questions/1817370/using-ediff-as-git-mergetool
[mergetool.ediff]
    cmd = emacs --eval \"\
(progn\
  (defun ediff-write-merge-buffer ()\
    (let ((file ediff-merge-store-file))\
      (set-buffer ediff-buffer-C)\
      (write-region (point-min) (point-max) file)\
      (message \\\"Merge buffer saved in: %s\\\" file)\
      (set-buffer-modified-p nil)\
      (sit-for 1)))\
  (setq ediff-quit-hook 'kill-emacs\
        ediff-quit-merge-hook 'ediff-write-merge-buffer)\
  (ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\"\
                                   \\\"$BASE\\\" nil \\\"$MERGED\\\"))\"
[merge]
	tool = ediff
	conflictstyle = diff3
[diff]
	tool = ediff
[rerere]
	enabled = true

[includeIf  "gitdir:~/TNG/"]
  path = ~/.gitconfig-tng
