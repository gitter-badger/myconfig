#written by maximilian-huber.de
# ~/.aliasrc

if [ $__HOME_ALIASRC_SOURCED ]; then return; fi
__HOME_ALIASRC_SOURCED=1

have() { type "$1" &> /dev/null; }
confirm () {
    # call with a prompt string or use a default
    if [ -n "$BASH_VERSION" ]; then
        read -r -p "${1:-Are you sure? [y/N]} " response
    elif [ -n "$ZSH_VERSION" ]; then
        echo "${1:-Are you sure? [y/N]} "
        read response
    fi
    case $response in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}


# needs:
# vim, tmux, sudo, mutt

alias asdf="setxkbmap -layout de,de -variant neo,nodeadkeys -option grp:shifts_toggle -option grp_led:scroll -option altwin:swap_lalt_lwin"

alias vi="/var/run/current-system/sw/bin/vim"

if [ -x "$HOME/bin/ec" ]; then
  alias vim="$HOME/bin/ec -t"
  alias emacs="$HOME/bin/ec"
else
  alias vim="emacsclient -t"
  emacs () {
    command emacs "$@" &disown
  }
fi

alias magit='ec -e "(magit-status \"$(pwd)\")"'
alias pgp="gpg" #Typo
alias vime="vim -u ~/.vimencrypt -x "
alias gvime="gvim -u ~/.vimencrypt -x "
alias tvim="tmux new vim"
alias svim="sudo /usr/bin/vim -u /home/mhuber/.vimrc "

alias tmux="tmux -2"
alias tmx="tmux attach-session || tmux"
ntmx(){
  # name sessions automatically, depending on the current dir
  n=$(echo $(basename "$(pwd)") | sed "s/\./_/g")
  tmux attach-session -t "$n" || tmux new -s "$n"
}
if test -z $TMUX && [[ $TERM != "screen" ]]; then
if [ -n "$BASH_VERSION" ]; then
    bind '"\C-n":" ntmx\C-m"'
  elif [ -n "$ZSH_VERSION" ]; then
    bindkey -s '^n' '^qntmx\n'
  fi
fi

# makes "sudo vi" to "sudo vim"
alias sudo="sudo "

alias visudo='sudo EDITOR=vim visudo'

alias ssh="TERM=xterm ssh"

man(){
    /usr/bin/man $@ 2>/dev/null \
        || /run/current-system/sw/bin/man $@ 2>/dev/null \
        || which $@
}

have ag && {
  alias grepr="ag"
} || {
  grepr() { grep -rns --color=always "$@" | grep -v BinÃ¤rdatei 2>/dev/null; }
  grepri() { grepr -i "$@" }
}
greprL() { grepr "$@" | less -R; }
grepf() {
    # stolen from: https://www.manthanhd.com/2016/01/15/waiting-for-tomcat-to-start-up-in-a-script/
    if [ $# -ne 2 ]; then
        echo "usage: grepf \"search string\" filename"
        return 1
    fi
    FIFO=$(mktemp -u)
    mkfifo $FIFO || return 1
    {
        tailf --lines=-1 "$2" &
        TAILPID=$!
        read foo <$FIFO
        kill $TAILPID
    } | {
        grep -m 1 "$1"
        echo >$FIFO
    }
    rm $FIFO
}

alias httptunnel="ssh -ND localhost:9567 vserver"

alias g="git"
alias gs="git status"

alias t="tig"
alias tu='tig HEAD @{upstream}'
alias ta="task"
alias d="docker"
alias dc="docker-compose"

alias uncolor='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'
adddate() { # see http://serverfault.com/questions/310098/how-to-add-a-timestamp-to-bash-script-log
    while IFS= read -r line; do
        echo "$(date) $line"
    done
}

#--------------------------------------------------------------------
#   file specific
#-------------------------------------------------------------------{{{

alias rm='rm -I'
alias cp='cp -i'

alias mv='mv -vi'
# mkmv - creates a new directory and moves the file into it, in 1 step
# Usage: mkmv <file> <directory>
mkmv() {
  mkdir "$2"
  mv "$1" "$2"
}

alias ls='ls --color=auto'
alias ll='ls -alF'
alias lll='ls --color=always -alF | less -R'
alias la='ls -CFA'
alias l='ls -CF'
alias l.='ls -dF .[a-zA-Z0-9]*' #only show dotfiles
lgrep() { ls -alF | egrep "$@"; }

cdStack() {
  DEFAULT_LIMIT=19
  LIMIT=${1:-$DEFAULT_LIMIT}
  for i in {1..$LIMIT..-1}; do
    iDir="$(echo ~$i)"
    if [ ! -z "$iDir" ]; then
      echo "$i: $iDir"
    fi
  done 2>/dev/null
  if [ -n "$BASH_VERSION" ]; then
    read -p "Where to go: " input
  elif [ -n "$ZSH_VERSION" ]; then
    read "input?Where to go: "
  fi
  if [ -n "$input" ]; then
    if [ $input -eq $input 2>/dev/null ]; then
      cd ~$input
    fi
  fi
}

cd() { #Automatically do an ls after each cd
    builtin cd "$@" && \
        if [[ $(ls -1 | wc -l) -lt $(tput lines) ]]; then
            ls
        fi
}

alias cd..="cd .."
alias ..="cd .."

mkcd() { #make dir and enter it
  mkdir -p "$1"
  cd "$1"
}

cdtemp() {
  cd $(mktemp -d)
  pwd
}

cptemp() {
  f=$(realpath $1)
  cd $(mktemp -d)
  cp $f ./
  pwd
}

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Creates an archive from given directory
mktar() { tar cvf  "${1%%/}.tar"     "${1%%/}/"; }
mktgz() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
mktbz() { tar cvjf "${1%%/}.tar.bz2" "${1%%/}/"; }
mkzip() { zip -r $1 $1 }

alias pkill9="pkill --signal 9"

# disk usage for humans
duh() { test $# -eq 0 && set -- *; du -sch "$@" | sort -h; }

alias ducks='du -csh * |sort -rh |head -11'
alias ducksall='du -csh * |sort -rh'
alias ducksALL='du -ch --max-depth=1 ./ |sort -rh'
alias hducks='du -csh .??* |sort -rh |head -11'
alias hducksall='du -csh .??* |sort -rh'

ranger-cd() {
  tempfile='/tmp/chosendir'
  ranger --choosedir="$tempfile" "${@:-$(pwd)}"
  test -f "$tempfile" &&
  if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
    cd -- "$(cat "$tempfile")"
  fi
  rm -f -- "$tempfile"
}
if [ -n "$BASH_VERSION" ]; then
  bind '"\C-o":" ranger-cd\C-m"'
elif [ -n "$ZSH_VERSION" ]; then
  bindkey -s '^o' '^qranger-cd\n'
fi

# Find a file/dir/file&dir with a pattern in name:
ff() { find . -not -iwholename '*.svn*' -not -iwholename '*.git*' -type f -iname '*'$*'*' -ls 2>/dev/null ; }
ffd() { find . -not -iwholename '*.svn*' -not -iwholename '*.git*' -type d -iname '*'$*'*' -ls 2>/dev/null ; }
ffa() { find . -not -iwholename '*.svn*' -not -iwholename '*.git*' -iname '*'$*'*' -ls 2>/dev/null ; }
ffg() { find . -type f -print0 | xargs -0 grep -lI "$*" ; }

# Find a file with pattern $1 in name and Execute $2 on it:
fe() { find . -not -iwholename '*.svn*' -not -iwholename '*.git*' -type f -iname '*'${1:-}'*' -exec ${2:-file} {} \; ; }
fed() { find . -not -iwholename '*.svn*' -not -iwholename '*.git*' -type d -iname '*'${1:-}'*' -exec ${2:-file} {} \; ; }

# Extract files from nearly any archive
# Usage: ex <archive_name>
ex() {
  for file in "$@"; do
    if [ -f $file ] ; then
      opt=$( tr '[:upper:]' '[:lower:]' <<<"$file" )
      case $opt in
        *.tar.bz2) tar xjf $file ;;
        *.tar.gz) tar xzf $file ;;
        *.tar.xz) tar xvfJ $file ;;
        *.xz) xz -d $file ;; 
        *.tar.lzma) tar --lzma -xvf $file ;;
        *.bz2) bunzip2 $file ;;
        *.rar) unrar e $file ;;
        *.gz) gunzip $file ;;
        *.tar) tar xf $file ;;
        *.tbz2) tar xjf $file ;;
        *.tgz) tar xzf $file ;;
        *.zip) unzip $file ;;
        *.Z) uncompress $file ;;
        *.7z) 7z x $file ;;
        # *.jar) jar xf $file ;;
        *.jar) unzip $file ;;
        *.war) unzip $file ;;
        *.ear) unzip $file ;;
        *.deb) ar xv $file ;;
        *)
          echo "'$file' of type '$opt' cannot be extracted via ex(), more info:"
          file $file
          ;;
      esac
    else
      echo "'$file' is not a valid file"
    fi
  done
}

# list files from nearly any archive
# Usage: ex <archive_name>
exl() {
  for file in "$@"; do
    if [ -f $file ] ; then
      opt=$( tr '[:upper:]' '[:lower:]' <<<"$file" )
      case $opt in
        *.tar.bz2) tar -jdvf $file ;;
        *.tar.gz) tar -ztvf $file ;;
        # *.tar.xz) tar xvfJ $file ;;
        # *.tar.lzma) tar --lzma -xvf $file;;
        # *.bz2) bunzip2 $file ;;
        # *.rar) unrar e $file ;;
        *.gz) gzip -l $file ;;
        # *.tar) tar xf $file ;;
        # *.tbz2) tar xjf $file ;;
        # *.tgz) tar xzf $file ;;
        *.zip) unzip -l $file ;;
        # *.Z) uncompress $file ;;
        # *.7z) 7z x $file ;;
        # *.jar) unzip $file ;;
        # *.deb) ar xv $file ;;
        *.jar) unzip -l $file ;;
        *.war) unzip -l $file ;;
        *.ear) unzip -l $file ;;
        *)
          echo "'$file' cannot be listed via exl(), more info:"
          file $file
          ;;
      esac
    else
      echo "'$file' is not a valid file"
    fi
  done
}

countFilesByTypes() {
  find . -not -iwholename '*.svn*' -not -iwholename '*.git*' -type f -exec basename "{}" \; \
    | sed -e 's/.*\.//gi' \
    | sort \
    | uniq  -c \
    | sort  -rn
}

finddupes() {
  # from: http://www.commandlinefu.com/commands/view/3555/find-duplicate-files-based-on-size-first-then-md5-hash 
  find -not -empty -type f -printf "%s\n" \
    | sort -rn \
    | uniq -d \
    | xargs -I{} -n1 find -type f -size {}c -print0 \
    | xargs -0 md5sum \
    | sort \
    | uniq -w32 --all-repeated=separatae \
    | cut -d' ' -f2-
}

#-------------------------------------------------------------------}}}
#   system control
#-------------------------------------------------------------------{{{

alias reboot="systemctl reboot"
alias poweroff="systemctl poweroff"
alias halt="systemctl poweroff"
alias suspend="systemctl suspend"

# alias clamscan="sudo clamscan --recursive --infected --bell"
# alias clamclean="sudo clamscan --recursive --infected --bell --remove"
# alias clamupd="sudo freshclam"

# will show a list of all the currently loaded modules and all of their parameters
# should be run as root
my_mod_parameters () {
  N=/dev/null;
  C=`tput op` O=$(echo -en "\n`tput setaf 2`>>> `tput op`");
  for mod in $(cat /proc/modules|cut -d" " -f1);
  do
    md=/sys/module/$mod/parameters;
    [[ ! -d $md ]] && continue;
    m=$mod;
    d=`modinfo -d $m 2>$N | tr "\n" "\t"`;
    echo -en "$O$m$C";
    [[ ${#d} -gt 0 ]] && echo -n " - $d";
    echo;
    for mc in $(cd $md; echo *);
    do
      de=`modinfo -p $mod 2>$N | grep ^$mc 2>$N|sed "s/^$mc=//" 2>$N`;
      echo -en "\t$mc=`cat $md/$mc 2>$N`";
      [[ ${#de} -gt 1 ]] && echo -en " - $de";
      echo;
    done;
  done
}

# will show a list of the current power settings
my_power_settings() {
  sudo bash -c '
  for i in `find /sys/devices -name "bMaxPower"`;
  do
    for ii in `find $i -type f`;
    do
      bd=`dirname $ii`;
      busnum=`cat $bd/busnum`;
      devnum=`cat $bd/devnum`;
      title=`lsusb -s $busnum:$devnum`;
      echo -e "\n\n+++ $title\n  -$bd\n  -$ii";
      for ff in `find $bd/power -type f ! -empty 2>/dev/null`;
      do
        v=`cat $ff 2>/dev/null|tr -d "\n"`;
        [[ ${#v} -gt 0 ]] && echo -e " `basename $ff`=$v";
        v=;
      done | sort -g;
    done;
  done;
  echo -e "\n\n\n+++ Kernel Modules\n";
  for m in `command lspci -k|sed -n "/in use:/s,^.*: ,,p"|sort -u`;
  do
    echo "+ $m";
    systool -v -m $m 2> /dev/null | sed -n "/Parameters:/,/^$/p";
  done
  ';
}

# alias repairDevNull="sudo rm -f /dev/null; sudo mknod -m 666 /dev/null c 1 3"

alias dmesg="dmesg -T"

#-------------------------------------------------------------------}}}
#  docker 
#-------------------------------------------------------------------{{{

dcclean(){
    # call `dclean -a` to clean all containers
    docker ps -q $1 |xargs --no-run-if-empty docker rm
}

diclean(){
    # call `dclean -a` to clean all images
    remAll() {
        docker images -q -a |xargs -r docker rmi
    }
    remUntagged() {
        docker images | awk '/^<none>/ {print $3}' |xargs -r docker rmi
    }

    [[ "$1" == "-a" ]] && remAll || remUntagged
}

dclean(){
    # remove all dangling volumes
    docker volume ls -qf dangling=true |xargs -r docker volume rm

    confirm "also do dcclean?" && dcclean $@
    confirm "also do diclean?" && diclean $@
}

dssh(){
    containerID=""
    [ $1 ] && {
        containerID=$1
    } || {
        containers="$(docker ps | tail -n +2)"

        echo "choose number of container:"
        echo
        echo $containers | nl

        if [ -n "$BASH_VERSION" ]; then
            read -p "Num of container: " input
        elif [ -n "$ZSH_VERSION" ]; then
            read "input?Num of container: "
        fi
        if [ -n "$input" ]; then
            if [ $input -eq $input 2>/dev/null ]; then
                containerID="$(echo $containers | sed "${input}q;d" | awk '{print $1;}')"
            fi
        fi
    }
    [ "$containerID" ] && docker exec -i -t "$containerID" bash
}

dsaveAllRunning() {
    docker ps --format "{{.Image}}" |\
        while read -r image ; do
            echo "save image $image to tar..."
            docker save -o "$image.tar" "$image"
        done
}

dstop(){
    docker ps -q |xargs docker stop
}

#-------------------------------------------------------------------}}}
#  vagrant
#-------------------------------------------------------------------{{{

alias vup="vagrant up"
alias vreload="vagrant reload"
alias vhalt="vagrant halt"
alias vssh="vagrant ssh"

#-------------------------------------------------------------------}}}
#   multimedia
#-------------------------------------------------------------------{{{

myStopScreensaver(){
  # needs xdotool
  while true; do
    sleep $((60 * 4))
    xdotool key shift
  done
}

mdump() { mplayer -dumpstream "${1}" -dumpfile ${2}.mp4; }
mdir() {
  mplayer -shuffle -playlist \
    <(find "$PWD/$1" -type f -iregex ".*/.*\.\(wma\|mp3\|acc\|ogg\|flac\)")
}

#rename all images
#alias myrenameAllImages="jhead -autorot -nf%y%m%d-%f **/*.jpg"
alias myrenameImg="jhead -autorot -nf%y%m%d-%f"

geeqie() { command geeqie "$@" & }
rawtherapee() { command rawtherapee "$@" & }

#-------------------------------------------------------------------}}}
#   documente / printing
#-------------------------------------------------------------------{{{

zathura() {
  command zathura "$@" &disown
}
llpp() {
  command llpp "$@" &disown
}

#   printing

mystartcups() {
  [[  ! -f /tmp/myCupsStartet ]] && {
    echo "starting CUPS"
    sudo systemctl start avahi-daemon.service
    # sudo systemctl start cups.service
    sudo systemctl start org.cups.cupsd.service
    sudo systemctl start cups-browsed.service
    touch /tmp/myCupsStartet
    sleep 2
  }
}

# pdf zu A5 BroschÃ¼re
lprBookPre() {
  [[ -f $1 ]] && {
    pdftops -paperw 420 -paperh 595 $1 - \
      | psbook -q \
      | ps2pdf14 - "${1%.pdf}-booklet.pdf"
  } || { echo "file not found"; }
}
# druckt A5 BroschÃ¼ren
lprBook() {
  mystartcups
  [[ -f $1 ]] && {
    pdftops -paperw 420 -paperh 595 $1 - \
      | psbook -q \
      | ps2pdf14 - - \
      | lpr -o sides=two-sided-short-edge -o number-up=2 -o fit-to-page -o media=A4
  } || { echo "file not found"; }
}
alias myLprBook=lprBook
alias lprFit="lpr -o sides=two-sided-long-edge -o fit-to-page -o media=A4 "
alias lprFitL="lpr -o sides=two-sided-short-edge -o landscape -o fit-to-page -o media=A4 "

alias myPdfCrop="pdfcrop --margins \"20 30 20 40\""

alias myPdfCollect="gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=collected.pdf *.pdf"

#   PDFs

# Extract range of Pages From a PDF
# from: http://www.linuxjournal.com/content/tech-tip-extract-pages-pdf
myPdfpextr() {
  [[ -z "$3" ]] && {
    echo "myPdfpextr start end file"
  } || {
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER -dFirstPage=${1} \
      -dLastPage=${2} -sOutputFile=${3%.pdf}_p${1}-p${2}.pdf ${3}
  }
}

myPdfreducesize() {
  gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen\
    -dNOPAUSE -dQUIET -dBATCH -sOutputFile=${1%.pdf}-small.pdf $1
}

#   LaTeX

mylatexmk(){
    # TODO: in work
    [[ -z $TMUX ]] || {
        SESSION=$(tmux list-panes -F "#S")
        MAIN=$(grep -l '\\documentclass' *tex)
        tmux send-keys \
             "latexmk -pdf -synctex=1 -outdir=\".latexmk_files\" -pvc $MAIN" 'C-m'
        tmux split-window -t $SESSION:1 -h
        tmux send-keys "vim --servername $(basename $(dirname $MAIN))" 'C-m'
    }
}

mylualatexmk(){
    grep -l '\\documentclass' *tex | \
        xargs latexmk -pdflatex=lualatex -pdf -synctex=1 -outdir=".lualatexmk_files" -pvc
}

myxelatexmk(){
    grep -l '\\documentclass' *tex | \
        xargs latexmk -pdflatex=xelatex -pdf -synctex=1 -outdir=".xelatexmk_files" -pvc
}

alias mtw="myTexWrapper.sh"

#-------------------------------------------------------------------}}}
#   package management
#-------------------------------------------------------------------{{{

have nix-env && {
  #nix
  alias nixin="nix-env -iA"
  alias nixin-unfree="NIXPKGS_ALLOW_UNFREE=1 nix-env -iA"
  alias nix-zsh="nix-shell -p zsh --run zsh"
  alias nixTest="NIXPKGS_ALLOW_UNFREE=1 nix-shell --run zsh -p"
  nixRun() {
    if [ "$#" -eq "2" ]; then
      NIXPKGS_ALLOW_UNFREE=1 nix-shell -p "$1" --command "$2"
    else
      NIXPKGS_ALLOW_UNFREE=1 nix-shell -p "$1" --command "$1"
    fi
  }
  alias nixColGarbage="nix-collect-garbage -d --delete-older-than 7d"
  alias nixse="nix-env -qaP | grep -i"
  alias nixse-unfree="NIXPKGS_ALLOW_UNFREE=1 nix-env -qaP | grep -i"
  nixsel(){
      nix-env -qaP | grep $1 | less
  }
  mynixsel(){
      nix-env -f $NIXPKGS -qaP | grep $1 | less
  }
  alias nixlist="nix-env -qa \*"

  alias nixrem="nix-env --uninstall"

  alias nix-shell-unfree="NIXPKGS_ALLOW_UNFREE=1 nix-shell"

  [ -x ~/myconfig/scripts/rebuild.sh ] && {
    alias upg="~/myconfig/scripts/rebuild.sh"
    alias nixupg="~/myconfig/scripts/rebuild.sh"
    alias nixosupg="~/myconfig/scripts/rebuild.sh"
  } || {
    alias nixupg="nix-channel --update && nix-env --upgrade"
    alias upg='nixupg'
    #nixos
    alias nixosupg="sudo nixos-rebuild switch --fallback --upgrade"
  }

  freeStoreSpace() {
    for folder in /nix/store/*-nixos-vm; do
      nix-store --delete $folder;
    done
    nix-store --gc
    nix-collect-garbage -d
    sudo nix-collect-garbage -d
  }
}

have pacman && {
  # remove orphan pacman packages and delete packages in the cache, which are
  # older than 30 days
  myRemOrphans() {
    if [[ ! -n $(pacman -Qdt) ]]; then
      echo no orphans to remove
    else
      sudo pacman -Rs $(pacman -Qdtq)
    fi

    echo "$(find /var/cache/pacman/pkg/ -type f -mtime +100 | wc -l) old packages to remove from cache"
    find /var/cache/pacman/pkg/ -type f -mtime +100 -exec sudo rm -v {} \;
  }

  # Pacman alias examples
  alias pacupg='sudo pacman -Syu ; echo ; myRemOrphans'
  alias pacin='sudo pacman -S'
  alias pacins='sudo pacman -U'
  alias pacre='sudo pacman -R'
  alias pacrem='sudo pacman -Rns'
  alias pacrep='pacman -Si'
  alias pacreps='pacman -Ss'
  alias pacloc='pacman -Qi'
  alias paclocs='pacman -Qs'

  have nix-env && {
      alias upg='pacupg && nixupg'
  } || {
      alias upg='pacupg'
  }

  # Additional pacman alias examples
  alias pacupd='sudo pacman -Sy && sudo abs'
  alias pacinsd='sudo pacman -S --asdeps'
  alias pacmir='sudo pacman -Syy'

  #update via packer
  alias packerupd="packer -Syu --aur"
} || {
  have apt-get && {
    alias aptupd="sudo apt-get update && sudo apt-get upgrade"
    alias aptin="sudo apt-get install"
    alias aptre="sudo apt-get remove"
    alias aptse="apt-cache search"
  }
}

cabalupd() {
  cabal list --simple-output --installed \
    | awk '{print $1}' \
    | uniq \
    | xargs -I {} cabal install {} --reinstall
}

#-------------------------------------------------------------------}}}
#   aws
#-------------------------------------------------------------------{{{

alias aws="NIXPKGS_ALLOW_UNFREE=1 nix-shell -p 'aws' 'ec2_api_tools'"

#-------------------------------------------------------------------}}}
#   some networking
#-------------------------------------------------------------------{{{

alias wwan="sudo systemctl start ModemManager.service && sudo watch -n 1 systemctl status ModemManager.service; sudo nmtui"
alias wwan-f="sudo systemctl restart ModemManager.service && sudo watch -n 1 systemctl status ModemManager.service; sudo nmtui"

startphp() { php -S 127.0.0.1:8080; }
mydhcp() {
  sudo ip link set $1 up
  sudo dhcpcd -w -B $1
}

# gen QR-Code for a WiFi:
genQrCode(){
  have qrencode && {
    SSID=$(zenity --entry --text="Network name (SSID)" --title="Create WiFi QR")
    PASS=$(zenity --password --title="Wifi Password")
    qrencode -s 7 -o qr-${SSID}.png "WIFI:S:${SSID};T:WPA;P:${PASS};;"
  } || echo "needs qrencode"
}

alias ping6alle="ping6 ff02::1%eth0"
alias ping6allw="ping6 ff02::1%wlan0"
# or: mtr
alias myarp-scan-e="sudo arp-scan --interface=enp0s25 --localnet"
alias myarp-scan-w="sudo arp-scan --interface=wlp3s0 --localnet"
mynmap() {
    nmap -sn "${1:-192.168.178.0}/${2:-24}" -oG -
}

# Get IP (call with myip)
myip() { myip=`elinks -dump http://checkip.dyndns.org:8245/`; echo "${myip}"; }

myiscsiRoutine() {
  # myiscsiRoutine UUID IP
  #sudo systemctl start open-iscsi.service
  #sudo iscsiadm -m discovery -t sendtargets -p $2

  sudo iscsiadm -m node -p $2 --login
  sleep 3
  sudo mkdir -p /mnt/iscsi/
  sudo mount /dev/disk/by-uuid/${1} /mnt/iscsi/
}

getCert() {
  if [[ "$#" -eq 0 ]]; then
    echo "usage: getCert some.host.tld:345"
    return 0
  fi
  openssl s_client -connect "$1" < /dev/null \
      | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > "$1.crt"
}

#-------------------------------------------------------------------}}}
#   misc
#-------------------------------------------------------------------{{{

meld() {
  command meld "$@" &disown
}

Franz() {
  command Franz "$@" &disown
}

alias steam="NIXPKGS_ALLOW_UNFREE=1 nix-shell -p steam --command \"optirun steam\""

touchpadtoggle(){
  xdotool mousemove 0 0
  synclient TouchpadOff=$(synclient -l | grep -c 'TouchpadOff.*=.*0')
}

hgrep() { history | egrep "$@"; }

alias tes="myThesausrus.sh"
alias dic="dic.sh"

# #have tmux && {
#   run_under_tmux() {
#     # Run $1 under session or attach if such session already exist.
#     # $2 is optional path, if no specified, will use $1 from $PATH.
#     # If you need to pass extra variables, use $2 for it as in example below..
#     # Example usage:
#     #  torrent() { run_under_tmux 'rtorrent' '/usr/local/rtorrent-git/bin/rtorrent'; }
#     #  mutt() { run_under_tmux 'mutt'; }
#     #  irc() { run_under_tmux 'irssi' "TERM='screen' command irssi"; }

#     # There is a bug in linux's libevent...
#     # export EVENT_NOEPOLL=1

#     command -v tmux >/dev/null 2>&1 || return 1

#     if [ -z "$1" ]; then return 1; fi
#     local name="$1"
#     if [ -n "$2" ]; then
#       local file_path="$2"
#     else
#       local file_path="command ${name}"
#     fi

#     if tmux has-session -t "${name}" 2>/dev/null; then
#       tmux attach -d -t "${name}"
#     else
#       tmux new-session -s "${name}" "${file_path}" \; set-option status \; set set-titles-string "${name} (tmux@${HOST})"
#     fi
#   }
#   # have mutt && mutt() { run_under_tmux 'mutt'; }
#   # have ncmpcpp && ncmpcpp() { run_under_tmux 'ncmpcpp'; }
#   #have finch && finch() { run_under_tmux 'finch'; }
#   #have ekg2 && ekg2() { run_under_tmux 'ekg2'; }
# #}

myXnest() {
  Xnest :1 &
  export DISPLAY=localhost:1
}

#-------------------------------------------------------------------}}}
#   some functions
#-------------------------------------------------------------------{{{

mycompTime() { #compare the speed of two ($1, $2) commands (loop $3 times)
  if [ $# -ne 3 ]; then return 1; fi
  type $1 >/dev/null 2>&1 || return 2
  type $2 >/dev/null 2>&1 || return 3
  printf 1
  time for ((i=0; i<${3:-10}; i++)) ; do $1 ; done >/dev/null 2>&1
  printf 2
  time for ((i=0; i<${3:-10}; i++)) ; do $2 ; done >/dev/null 2>&1
}

# Repeat n times command
myRepeat() {
  # example: myRepeat 10 ls
  local i max
  max=$1; shift;
  for ((i=1; i <= max ; i++)); do
    eval "$@";
  done
}

myclock(){
  while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done &
}

#}}}

if [ -n "$BASH_VERSION" ]; then
  alias reload='source ~/.bashrc'
elif [ -n "$ZSH_VERSION" ]; then
  alias reload='source /etc/zsh/zshrc'
fi
# vim: set filetype=sh foldmethod=marker foldmarker={{{,}}}:
